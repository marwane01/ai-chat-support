name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff + black)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install ruff black || true

      - name: Ruff
        run: ruff check .

      - name: Black (check only)
        run: black --check .

  typecheck:
    name: Type check (mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install mypy + stubs
        run: |
          python -m pip install --upgrade pip
          pip install mypy types-requests types-redis types-psycopg2-binary

      - name: mypy
        run: |
          if [ -f mypy.ini ]; then mypy --install-types --non-interactive .
          else mypy --install-types --non-interactive --ignore-missing-imports .
          fi  


  tests:
    name: Tests (pytest + Postgres + Qdrant)
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: chatbi
          POSTGRES_PASSWORD: chatbi
          POSTGRES_DB: chatbi
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U chatbi -d chatbi"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

      qdrant:
        image: qdrant/qdrant:v1.12.2
        ports: ["6333:6333"]
        options: >-
          --health-cmd="wget -qO- http://localhost:6333/readyz || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    env:
      DATABASE_URL: postgresql+psycopg2://chatbi:chatbi@localhost:5432/chatbi
      POSTGRES_DSN: postgresql://chatbi:chatbi@localhost:5432/chatbi
      QDRANT_URL: http://localhost:6333
      FAQ_BACKEND: QDRANT
      EMBED_MODEL: sentence-transformers/paraphrase-multilingual-mpnet-base-v2
      PYTHONWARNINGS: ignore
      PHASE3_MEMORY: "off"  # flip to "on" if you add Redis service below

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: System deps
        run: sudo apt-get update && sudo apt-get install -y libpq-dev postgresql-client

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install app + test deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
          pip install pytest pytest-cov httpx requests

      - name: Wait for Qdrant
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:6333/readyz >/dev/null; then echo "Qdrant ready"; exit 0; fi
            sleep 1
          done
          echo "Qdrant not ready" && exit 1

      - name: Init DB from schema.sql
        env:
          PGPASSWORD: chatbi
        run: psql -h localhost -U chatbi -d chatbi -f db_schema.sql

      - name: Index FAQs to Qdrant (if data present)
        env:
          FAQ_JSONL: data/faqs.jsonl
        run: |
          if [ -f app/rag/index_faqs.py ] && [ -f data/faqs.jsonl ]; then
            python -m app.rag.index_faqs
          else
            echo "No FAQ index step (script or data missing); skipping."
          fi

      - name: Run pytest
        run: pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=xml

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: ignore

  rag-eval:
    name: RAG Eval (golden Q&A)
    runs-on: ubuntu-latest
    needs: tests
    services:
      qdrant:
        image: qdrant/qdrant:v1.12.2
        ports: ["6333:6333"]
        options: >-
          --health-cmd="wget -qO- http://localhost:6333/readyz || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    env:
      QDRANT_URL: http://localhost:6333
      FAQ_BACKEND: QDRANT
      EMBED_MODEL: sentence-transformers/paraphrase-multilingual-mpnet-base-v2

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install eval deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install ragas deepeval

      - name: Prepare corpus (index if needed)
        run: |
          if [ -f app/rag/index_faqs.py ] && [ -f data/faqs.jsonl ]; then
            python -m app.rag.index_faqs
          fi

      - name: Run RAG eval (if script exists)
        run: |
          if [ -f app/scripts/rag_eval.py ]; then
            python -m app.scripts.rag_eval --gold data/golden_faq_eval.jsonl --out rag_eval.json
          elif [ -f app/eval/rag_eval.py ]; then
            python -m app.eval.rag_eval --gold data/golden_faq_eval.jsonl --out rag_eval.json
          else
            echo "No RAG eval script found; writing placeholder results."
            echo '{"status":"skipped"}' > rag_eval.json
          fi

      - name: Upload RAG eval report
        uses: actions/upload-artifact@v4
        with:
          name: rag-eval-report
          path: rag_eval.json
          if-no-files-found: warn
